{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["icon","completed","failed","exception","pending","running","color","pools","usualSuspects","App","useState","isLoading","setIsLoading","groups","setGroups","pushMap","setPushMap","tasks","setTasks","testSuiteResults","setTestSuiteResults","useEffect","length","forEach","suspect","fetch","moment","add","format","then","response","json","pushLog","Object","keys","filter","pushId","changesets","files","ok","index","taskGroupId","taskId","_groups","_group","_pushMap","catch","err","console","error","taskGroup","_task","includes","task","provisionerId","workerType","map","status","name","metadata","suite","split","pool","state","resolved","runs","slice","undefined","finally","reduce","sA","pA","t","Container","className","Spinner","animation","size","Table","sort","style","width","replace","poolSuitetasks","tA","tB","colSpan","Button","marginLeft","variant","margin","Badge","_state","striped","href","target","rel","title","user","date","toISOString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","library","fas","fab","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.264da661.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Badge from 'react-bootstrap/Badge';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport moment from 'moment';\n\nconst icon = {\n  completed: 'check-circle',\n  failed: 'times-circle',\n  exception: 'exclamation-circle',\n  pending: 'spinner',\n  running: 'cog'\n};\nconst color = {\n  completed: 'green',\n  failed: 'red',\n  exception: 'orange',\n  pending: 'gray',\n  running: 'darkgray'\n};\nconst pools = [\n  'gecko-t/win7-32-azure',\n  'gecko-t/win7-32-gpu-azure',\n  'gecko-t/win10-64-azure',\n  'gecko-t/win10-64-gpu-azure'\n];\nconst usualSuspects = [\n  'jmaher@mozilla.com',\n  'mcornmesser@mozilla.com',\n  'rthijssen@mozilla.com'\n];\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [groups, setGroups] = useState([]);\n  const [pushMap, setPushMap] = useState({});\n  const [tasks, setTasks] = useState([]);\n  const [testSuiteResults, setTestSuiteResults] = useState({});\n  useEffect(() => {\n    if (!groups.length) {\n      usualSuspects.forEach(suspect => {\n        fetch(`https://hg.mozilla.org/try/json-pushes?full=1&startdate=${moment().add(-14, 'days').format('YYYY-MM-DD')}&user=${suspect}`)\n          .then(response => response.json())\n          .then(pushLog => {\n            Object.keys(pushLog)\n              .filter(pushId => pushLog[pushId].changesets[0].files[0] === 'try_task_config.json')\n              .forEach(pushId => {\n                fetch(`https://firefox-ci-tc.services.mozilla.com/api/index/v1/tasks/gecko.v2.try.pushlog-id.${pushId}`)\n                  .then(response => {\n                    if (response.ok) return response.json();\n                    throw response;\n                  })\n                  .then(index => {\n                    if (!!index.tasks && !!index.tasks.length) {\n                      const taskGroupId = index.tasks[0].taskId;\n                      // append the task group id to the list of task group ids (if not already present)\n                      setGroups(_groups => [\n                        ..._groups.filter(_group => _group !== taskGroupId),\n                        taskGroupId\n                      ]);\n                      // map task group id to push\n                      setPushMap(_pushMap => ({\n                        ..._pushMap,\n                        [taskGroupId]: {\n                          ...pushLog[pushId],\n                          pushId\n                        }\n                      }));\n                    }\n                  }).catch(err => {\n                    console.error(err);\n                  });\n              });\n          })\n          .catch(err => {\n            console.error(err);\n          });\n      });\n    }\n  }, [groups]);\n  useEffect(() => {\n    groups.forEach(taskGroupId => {\n      fetch(`https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task-group/${taskGroupId}/list`)\n        .then(response => {\n          if (response.ok) return response.json();\n          throw response;\n        })\n        .then(taskGroup => {\n          setTasks(tasks => [\n            ...tasks.filter(_task => _task.taskGroupId !== taskGroupId),\n            ...taskGroup.tasks\n              .filter(_task => pools.includes(`${_task.task.provisionerId}/${_task.task.workerType}`))\n              .map(_task => ({\n                taskId: _task.status.taskId,\n                taskGroupId: _task.task.taskGroupId,\n                name: _task.task.metadata.name,\n                suite: _task.task.metadata.name.split('/')[1],\n                pool: `${_task.task.provisionerId}/${_task.task.workerType}`,\n                state: _task.status.state,\n                resolved: (!!_task.status.runs && !!_task.status.runs.length) ? _task.status.runs.slice(-1)[0].resolved : undefined\n              }))\n          ]);\n        })\n        .catch(err => {\n          console.error(err);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    });\n  }, [groups]);\n\n  useEffect(() => {\n    setTestSuiteResults(testSuiteResults => ({\n      ...testSuiteResults,\n      ...tasks.reduce((sA, task) => {\n            let { suite } = task;\n            return {\n              ...sA,\n              [suite]: pools.reduce((pA, pool) => ({\n                ...pA,\n                [pool]: tasks.filter(t => t.suite === suite && t.pool === pool)\n              }), {})\n            };\n          }, {})\n    }));\n  }, [tasks]);\n\n  return (\n    <Container>\n      <h1 className=\"text-center\">is the grass greener on the azure side?</h1>\n      {\n        (isLoading)\n          ? (\n              <div className=\"text-center\">\n                <Spinner animation=\"border\" size=\"lg\" />\n              </div>\n            )\n          : null\n      }\n      <h2 className=\"text-muted text-center\">\n        tl;dr\n      </h2>\n      <Table>\n        {\n          pools.sort().map(pool => (\n            <tbody key={pool}>\n              <tr>\n                <td className=\"text-right\" style={{width: '50%'}}>\n                  <h6>\n                    {pool.split('/')[1].replace('-azure', '')}\n                  </h6>\n                </td>\n                <td style={{width: '50%'}}>\n                  {\n                    // inspect the last task result for each suite in the pool.\n                    // if all suites have been tested and all have a last task status of completed, call it green.\n                    Object.keys(testSuiteResults).map(suite => {\n                      let poolSuitetasks = tasks\n                        .filter(t => t.suite === suite && t.pool === pool)\n                        .sort((tA, tB) => (tA.resolved < tB.resolved) ? -1 : (tA.resolved > tB.resolved) ? 1 : 0);\n                      return !!poolSuitetasks.length && poolSuitetasks.slice(-1)[0].state === 'completed'\n                    }).includes(false)\n                      ? (\n                          <h6 style={{color: 'red'}}>\n                            no\n                          </h6>\n                        )\n                      : (\n                          <h6 style={{color: 'green'}}>\n                            yes\n                          </h6>\n                        )\n                  }\n                </td>\n              </tr>\n              <tr className=\"text-center\">\n                <td colSpan=\"2\">\n                  {\n                    Object.keys(color).map(state => (\n                      <Button\n                        key={state}\n                        style={{ marginLeft: '0.3em' }}\n                        variant=\"outline-secondary\"\n                        size=\"sm\">\n                        <FontAwesomeIcon\n                          style={{margin: '0 1px'}}\n                          className={['pending', 'running'].includes(state) ? 'fa-sm fa-spin' : 'fa-sm'}\n                          icon={icon[state]}\n                          color={color[state]} />\n                        &nbsp;\n                        <Badge variant=\"secondary\">\n                          {\n                            Object.keys(testSuiteResults).map(suite => {\n                              let poolSuitetasks = tasks\n                                .filter(t => t.suite === suite && t.pool === pool)\n                                .sort((tA, tB) => (tA.resolved < tB.resolved) ? -1 : (tA.resolved > tB.resolved) ? 1 : 0);\n                              return (!!poolSuitetasks.length)\n                                ? poolSuitetasks.slice(-1)[0].state\n                                : undefined\n                            }).filter(_state => _state === state).length\n                          } / {\n                            Object.keys(testSuiteResults).filter(suite => !!tasks.filter(t => t.suite === suite && t.pool === pool).length).length\n                          }\n                        </Badge>\n                      </Button>\n                    ))\n                  }\n                </td>\n              </tr>\n            </tbody>\n          ))\n        }\n      </Table>\n      <h2 className=\"text-muted text-center\">\n        detail\n      </h2>\n      <Table striped size=\"sm\">\n        <thead>\n          <tr>\n            <th className=\"text-muted text-right\">\n              suite\n            </th>\n            {\n              pools.sort().map(pool => (\n                <th key={pool} className=\"text-muted text-center\">\n                  {pool.split('/')[1].replace('-azure', '')}\n                </th>\n              ))\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {\n            Object.keys(testSuiteResults).sort().map(suite => (\n              <tr key={suite}>\n                <td className=\"text-right\">{suite}</td>\n                {\n                  pools.sort().map(pool => (\n                    <td key={pool} className=\"text-center\">\n                      {\n                        testSuiteResults[suite][pool].sort((tA, tB) => (tA.resolved < tB.resolved) ? -1 : (tA.resolved > tB.resolved) ? 1 : 0).slice(-5).map(task => (\n                          <a key={task.taskId} href={`https://firefox-ci-tc.services.mozilla.com/tasks/${task.taskId}`} target=\"_blank\" rel=\"noreferrer\" title={`${pushMap[task.taskGroupId].user.split('@')[0]} (try/${pushMap[task.taskGroupId].pushId}): pushed: ${moment(pushMap[task.taskGroupId].date * 1000).toISOString()} resolved: ${task.resolved}`}>\n                            <FontAwesomeIcon\n                              style={{margin: '0 1px'}}\n                              className={['pending', 'running'].includes(task.state) ? 'fa-sm fa-spin' : 'fa-sm'}\n                              icon={icon[task.state]}\n                              color={color[task.state]} />\n                          </a>\n                        ))\n                      }\n                    </td>\n                  ))\n                }\n              </tr>\n            ))\n          }\n        </tbody>\n      </Table>\n      <ul>\n        <li>\n          status legend:\n          {\n            Object.keys(color).map(state => (\n              <div key={state}>\n                <FontAwesomeIcon\n                  style={{margin: '0 1px'}}\n                  className={['pending', 'running'].includes(state) ? 'fa-sm fa-spin' : 'fa-sm'}\n                  icon={icon[state]}\n                  color={color[state]} />\n                &nbsp;\n                {state}\n              </div>\n            ))\n          }\n        </li>\n        <li className=\"text-muted\">\n          task status counts, in the tl;dr table, are determined by the last task run for the test suite and platform.\n        </li>\n        <li className=\"text-muted\">\n          task status indicators, in the detail table, are limited to the five most recent task runs for the test suite and platform.\n        </li>\n        <li className=\"text-muted\">\n          the try push-log is used to find task groups containing tasks that are configured to run on azure worker types for pushes from a configured subset of users.\n        </li>\n        <li>\n          the code for this github page is hosted at: <a href=\"https://github.com/mozilla-platform-ops/are-we-green-on-azure-yet\">github.com/mozilla-platform-ops/are-we-green-on-azure-yet</a>.\n        </li>\n        <li>\n          the work to green up tests is tracked in: <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1676850\">bug 1676850</a>.\n        </li>\n      </ul>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fas, fab);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}