{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["icon","completed","failed","exception","pending","running","color","pools","usualSuspects","App","useState","isLoading","setIsLoading","groups","setGroups","tasks","setTasks","testSuiteResults","setTestSuiteResults","useEffect","forEach","suspect","fetch","then","response","json","pushLog","Object","keys","filter","pushId","changesets","files","ok","index","_groups","_group","taskId","catch","err","console","error","taskGroupId","taskGroup","_task","includes","task","provisionerId","workerType","map","status","name","metadata","suite","split","pool","state","resolved","runs","length","slice","undefined","finally","reduce","sA","pA","t","Container","className","Spinner","animation","size","Table","sort","style","width","replace","poolSuitetasks","tA","tB","striped","href","target","rel","title","margin","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","fas","fab","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da0826fd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst icon = {\n  completed: 'check-circle',\n  failed: 'times-circle',\n  exception: 'exclamation-circle',\n  pending: 'spinner',\n  running: 'cog'\n};\nconst color = {\n  completed: 'green',\n  failed: 'red',\n  exception: 'orange',\n  pending: 'gray',\n  running: 'darkgray'\n};\nconst pools = [\n  'gecko-t/win7-32-azure',\n  'gecko-t/win7-32-gpu-azure',\n  'gecko-t/win10-64-azure',\n  'gecko-t/win10-64-gpu-azure'\n];\nconst usualSuspects = [\n  'mcornmesser@mozilla.com',\n  'rthijssen@mozilla.com'\n];\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [groups, setGroups] = useState([]);\n  const [tasks, setTasks] = useState([]);\n  const [testSuiteResults, setTestSuiteResults] = useState({});\n  useEffect(() => {\n    usualSuspects.forEach(suspect => {\n      fetch(`https://hg.mozilla.org/try/json-pushes?full=1&startdate=2020-11-10&user=${suspect}`)\n        .then(response => response.json())\n        .then(pushLog => {\n          Object.keys(pushLog)\n            .filter(pushId => pushLog[pushId].changesets[0].files[0] === 'try_task_config.json')\n            .forEach(pushId => {\n              fetch(`https://firefox-ci-tc.services.mozilla.com/api/index/v1/tasks/gecko.v2.try.pushlog-id.${pushId}`)\n                .then(response => {\n                  if (response.ok) return response.json();\n                  throw response;\n                })\n                .then(index => {\n                  setGroups(_groups => [\n                    ..._groups.filter(_group => _group !== index.tasks[0].taskId),\n                    index.tasks[0].taskId\n                  ])\n                }).catch(err => {\n                  console.error(err);\n                });\n            });\n        })\n        .catch(err => {\n          console.error(err);\n        });\n    });\n  }, []);\n  useEffect(() => {\n    groups.forEach(taskGroupId => {\n      fetch(`https://firefox-ci-tc.services.mozilla.com/api/queue/v1/task-group/${taskGroupId}/list`)\n        .then(response => {\n          if (response.ok) return response.json();\n          throw response;\n        })\n        .then(taskGroup => {\n          setTasks(tasks => [\n            ...tasks.filter(_task => _task.taskGroupId !== taskGroupId),\n            ...taskGroup.tasks\n              .filter(_task => pools.includes(`${_task.task.provisionerId}/${_task.task.workerType}`))\n              .map(_task => ({\n                taskId: _task.status.taskId,\n                taskGroupId: _task.task.taskGroupId,\n                name: _task.task.metadata.name,\n                suite: _task.task.metadata.name.split('/')[1],\n                pool: `${_task.task.provisionerId}/${_task.task.workerType}`,\n                state: _task.status.state,\n                resolved: (!!_task.status.runs && !!_task.status.runs.length) ? _task.status.runs.slice(-1)[0].resolved : undefined\n              }))\n          ]);\n        })\n        .catch(err => {\n          console.error(err);\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    });\n  }, [groups]);\n\n  useEffect(() => {\n    setTestSuiteResults(testSuiteResults => ({\n      ...testSuiteResults,\n      ...tasks.reduce((sA, task) => {\n            let { suite } = task;\n            return {\n              ...sA,\n              [suite]: pools.reduce((pA, pool) => ({\n                ...pA,\n                [pool]: tasks.filter(t => t.suite === suite && t.pool === pool)\n              }), {})\n            };\n          }, {})\n    }));\n  }, [tasks]);\n\n  return (\n    <Container>\n      <h1 className=\"text-center\">are we green on azure yet?</h1>\n      {\n        (isLoading)\n          ? (\n              <div className=\"text-center\">\n                <Spinner animation=\"border\" size=\"lg\" />\n              </div>\n            )\n          : null\n      }\n      <h2 className=\"text-muted text-center\">\n        tl;dr\n      </h2>\n      <Table>\n        <tbody>\n          {\n            pools.sort().map(pool => (\n              <tr key={pool}>\n                <td className=\"text-right\" style={{width: '50%'}}>\n                  <h6>\n                    {pool.split('/')[1].replace('-azure', '')}\n                  </h6>\n                </td>\n                <td style={{width: '50%'}}>\n                  {\n                    // inspect the last task result for each suite in the pool.\n                    // if all suites have been tested and all have a last task status of completed, call it green.\n                    Object.keys(testSuiteResults).map(suite => {\n                      let poolSuitetasks = tasks\n                        .filter(t => t.suite === suite && t.pool === pool)\n                        .sort((tA, tB) => (tA.resolved < tB.resolved) ? -1 : (tA.resolved > tB.resolved) ? 1 : 0);\n                      return !!poolSuitetasks.length && poolSuitetasks.slice(-1)[0].state === 'completed'\n                    }).includes(false)\n                      ? (\n                          <h6 style={{color: 'red'}}>\n                            no\n                          </h6>\n                        )\n                      : (\n                          <h6 style={{color: 'green'}}>\n                            yes\n                          </h6>\n                        )\n                  }\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </Table>\n      <h2 className=\"text-muted text-center\">\n        detail\n      </h2>\n      <Table striped size=\"sm\">\n        <thead>\n          <tr>\n            <th className=\"text-muted text-right\">\n              suite\n            </th>\n            {\n              pools.sort().map(pool => (\n                <th key={pool} className=\"text-muted text-center\">\n                  {pool.split('/')[1].replace('-azure', '')}\n                </th>\n              ))\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {\n            Object.keys(testSuiteResults).sort().map(suite => (\n              <tr key={suite}>\n                <td className=\"text-right\">{suite}</td>\n                {\n                  pools.sort().map(pool => (\n                    <td key={pool} className=\"text-center\">\n                      {\n                        testSuiteResults[suite][pool].sort((tA, tB) => (tA.resolved < tB.resolved) ? -1 : (tA.resolved > tB.resolved) ? 1 : 0).slice(-5).map(task => (\n                          <a key={task.taskId} href={`https://firefox-ci-tc.services.mozilla.com/tasks/${task.taskId}`} target=\"_blank\" rel=\"noreferrer\" title={task.resolved}>\n                            <FontAwesomeIcon\n                              style={{margin: '0 1px'}}\n                              className={['pending', 'running'].includes(task.state) ? 'fa-sm fa-spin' : 'fa-sm'}\n                              icon={icon[task.state]}\n                              color={color[task.state]} />\n                          </a>\n                        ))\n                      }\n                    </td>\n                  ))\n                }\n              </tr>\n            ))\n          }\n        </tbody>\n      </Table>\n      <p>\n        the code for this github page is hosted at: <a href=\"https://github.com/mozilla-platform-ops/are-we-green-on-azure-yet\">github.com/mozilla-platform-ops/are-we-green-on-azure-yet</a>.<br />\n        the work to green up tests is tracked in: <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1676850\">bug 1676850</a>.<br />\n      </p>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { fab } from '@fortawesome/free-brands-svg-icons';\n\nlibrary.add(fas, fab);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}